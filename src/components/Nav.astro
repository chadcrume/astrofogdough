---
import { Image } from "astro:assets";
import Logo2 from "@assets/logo/circle2.svg";
import MenuButton from "@assets/menubutton.svg";
import UserIcon from "@assets/usericon.svg";
import navItems from "@components/NavItems.ts";
const currentPath = Astro.url.pathname;
const currentParentRoute =
  "/" + currentPath.split("/").filter((i) => i && i != "")[0];
const isHomepage = Astro.url.pathname === "/";
---

<script>
  const toaster = document.querySelector(".toaster");
  const toast = document.querySelector(".toast");
  if (toaster && toast) {
    toaster.addEventListener("click", (event) => {
      event.preventDefault(); // Prevents default anchor behavior
      toast.classList.remove("hide");
      setTimeout(() => {
        toast.classList.add("hide");
      }, 2000);
    });
  }
  /*
   * The following is based on generated code from google search
   */
  import navItems from "@components/NavItems.ts";

  let currentDirectory = "/";
  const commandInput = document.getElementById("command-input");
  const terminalOutput = document.getElementById("terminal-output");

  function executeCommand(command: string) {
    const [cmd, ...args] = command.split(" ");
    let output = "";

    switch (cmd) {
      case "?":
      case "h":
      case "help":
        output =
          "Usage: &lt;cmd&gt; &lt;options&gt;\n" +
          "Commands:\n\n" +
          " - pwd\n \tShows current directory\n\n"+
          " - ls\n \tLists directory contents (pages)\n\n"+
          " - cd &lt;page&gt;\n \tNavigates to that page.\n\n" +
          " - &lt;page&gt;\n \tNavigates to that page.\n\n";
        break;
      case "cd":
        if (args.length > 0) {
          currentDirectory = args[0];
          output = "Directory changed to " + currentDirectory;
          const navDir = navItems.find((v) => v.name == currentDirectory);
          if (navDir) {
            window.location.href = navDir.route;
          } else if (currentDirectory == "/") {
            window.location.href = "/";
          }
        } else {
          output = "Usage: cd &lt;directory&gt;";
        }
        break;
      case "pwd":
        output = currentDirectory;
        break;
      case "ls":
        output = listFiles(currentDirectory);
        break;
      default:
        const navCmd = navItems.find((v) => v.name == cmd);
        if (navCmd) {
          output = "Opening " + cmd;
          window.location.href = navCmd.route;
        } else if (cmd == "/") {
          output = "Opening " + cmd;
          window.location.href = "/";
        } else {
          output = "Command not found: " + cmd;
        }
    }

    if (terminalOutput)
      terminalOutput.innerHTML =
        "<br>&gt; " + command + "<br>" + output + "<br>";
  }

  // Simulate file listing
  function listFiles(directory: string) {
    // Replace this with your actual file/directory structure logic
    if (directory === "/") {
      return navItems
        .map((i) => {
          return i.name;
          // <a
          //   href={i.route}
          //   aria-current="page"
          //   class:list={[
          //     "p-1",
          //     currentParentRoute == i.route ? "current-nav-page" : "",
          //   ]}
          // >
          //   {i.title}
          // </a>
        })
        .join("\n");
      // } else if (directory === "dir1") {
      //   return "file1.txt\nfile2.txt";
      // } else if (directory === "dir2") {
      //   return "file3.txt";
    }
    return "No files found in " + directory;
  }

  if (commandInput)
    commandInput.addEventListener("keydown", function (event) {
      if (event.key === "Enter") {
        const command = (commandInput as HTMLInputElement).value;
        executeCommand(command);
        (commandInput as HTMLInputElement).value = "";
        event.preventDefault();
      }
    });
</script>

<div
  class="navbar bg-clip-padding backdrop-filter backdrop-blur-sm bg-opacity-20 p-8 border-b border-gray-00"
>
  <div class="navbar-start">
    <div class="flex items-center">
      {
        !isHomepage && (
          // Using verbose <Fragment> for better IDE
          <Fragment>
            <div class="mr-2">
              <a href="/" data-astro-prefetch class="whitespace-nowrap">
                Fogdough
              </a>
            </div>
            <div>
              <div class="gradient logo-nav ml-1 mr-1" transition:name="logo">
                <a href="/" data-astro-prefetch class="whitespace-nowrap">
                  <Image src={Logo2} alt="Fogdough logo" />
                </a>
              </div>
            </div>
          </Fragment>
        )
      }
      {
        isHomepage && (
          <Fragment>
            <div>Fogdough</div>
            <div>
              <div class="logo-nav ml-1 mr-1">
                <Image class=" opacity-0" src={Logo2} alt="Fogdough logo" />
              </div>
            </div>
          </Fragment>
        )
      }

      <!-- <div class="dropdown">
        <div
          tabindex="0"
          role="button"
          class="lg:hidden btn btn-ghost border-none pl-1 pr-1"
        >
          <MenuButton />
        </div>
        <ul
          tabindex="0"
          class="menu menu-sm dropdown-content rounded-xs z-1 mt-3 w-52 p-1 shadow bg-base-300"
        >
          {
            navItems.map((i) => (
              <li class:list={["p-0", i.name]}>
                <a
                  href={i.route}
                  aria-current="page"
                  class:list={[
                    "p-1",
                    currentParentRoute == i.route ? "current-nav-page" : "",
                  ]}
                >
                  {i.title}
                </a>
              </li>
            ))
          }
        </ul>
      </div>

      <div class="hidden lg:flex">
        <ul class="menu menu-horizontal px-1">
          {
            navItems.map((i) => (
              <li class={i.name}>
                <a
                  href={i.route}
                  aria-current="page"
                  class:list={[
                    "nav",
                    currentParentRoute == i.route ? "current-nav-page" : "",
                  ]}
                >
                  {i.title}
                </a>
              </li>
            ))
          }
        </ul>
      </div> -->

      <div class="flex">
        <div id="terminal-container">
          &gt; <input autocomplete="off" type="text" id="command-input" autofocus />
          <pre id="terminal-output"></pre>
        </div>
      </div>
    </div>
  </div>
  <div class="navbar-center hidden">
    <!-- lg:flex -->
    <ul class="menu menu-horizontal px-1">
      {
        navItems.map((i) => (
          <li class={i.name}>
            <a
              href={i.route}
              aria-current="page"
              class:list={[
                "nav",
                currentParentRoute == i.route ? "current-nav-page" : "",
              ]}
            >
              {i.title}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
  <div class="navbar-end">
    <details class="dropdown dropdown-end">
      <summary class="list-none cursor-pointer m-1">
        <div class="avatar">
          You
          <!-- <div
            class="w-7 bg-black text-white rounded-full text-left justify-center items-center p-1"
          >
            <UserIcon />
          </div> -->
        </div>
      </summary>
      <ul
        class="menu dropdown-content bg-base-100 rounded-box rounded-sm rounded-tr-none z-1 w-52 p-2
        border-1 border-zinc-400"
      >
        <li>
          <div class="w-full block text-left bg-base-400 hover:bg-transparent">
            <div>User Name</div>
            <div class="pt-0 mb-0 mt-0 text-xs bg-none">name@company.com</div>
          </div>
          <div class="w-full block text-left hover:bg-transparent">
            <div class="w-auto">
              ðŸŒž
              <div class="inline-block w-10">
                <span
                  data-toggle-theme="dark,light"
                  data-act-class="pl-4"
                  class="border rounded-full border-base-content flex items-center cursor-pointer w-10 transition-all duration-300 ease-in-out pl-0"
                >
                  <span class="rounded-full w-3 h-3 m-1 bg-base-content">
                  </span>
                </span>
              </div>
              ðŸŒš
            </div>
          </div>
        </li>
        <li>
          <div class="w-full block text-left">
            <a href="/user-settings">Settings</a>
          </div>
        </li>
        <li>
          <div class="w-full block text-left toaster">
            <a href="#">Sign Out</a>
          </div>
        </li>
      </ul>
    </details>
  </div>
</div>

<div class="toast toast-top toast-center hide">
  <div class="alert alert-info flex items-center justify-between">
    <span>Signed Out</span>
  </div>
</div>

<style>
  .hide {
    opacity: 0;
    transition: opacity 1s linear;
  }
  .navbar {
    font-family: monospace;
  }
</style>
<style>
  #terminal-container {
    font-family: monospace;
    font-size: 14px;
    background-color: black;
    color: white;
    padding: 10px;
    border: 1px solid white;
    width: 400px;
  }

  #terminal-output {
    margin: 0;
    padding: 0;
    white-space: pre;
    overflow: scroll;
    max-height: 200px;
  }

  #command-input {
    background-color: black;
    color: white;
    border: none;
    padding: 5px;
    outline: none;
  }

  #command-input::before {
    content: "&gt; ";
  }
</style>
