---
import Grid from "@components/Grid.astro";

const options = {
  method: "GET",
  headers: {
    accept: "application/json",
    "x-cg-demo-api-key": import.meta.env.PUBLIC_COINGECKOAPI_KEY,
  },
};

//   Get top-ranked coins in category
const category = "";
const vs_currency = "usd";
const response = await fetch(
  `${import.meta.env.PUBLIC_COINGECKOAPI_MARKETS}?vs_currency=${vs_currency}&include_tokens=top&sparkline=true&per_page=10&page=1`,
  options
).catch((err) => console.error(err));
// @ts-expect-error - Unsure why response type is unknown.
const coins: any[] = await response.json();
const test = "hello test";

function showCurrency(value: number) {
  // The following assignment formats the value for display.
  // It utilizes Math.round and Number.EPSILON to ensure accurate rounding
  // to two decimal places. Multiplying by 100 shifts the decimal point,
  // Math.round rounds to the nearest integer, and dividing by 100 shifts
  // the decimal point back. Number.EPSILON addresses potential floating-point
  // precision issues.
  // Using toLocaleString() to include comma formatting per thousands.
  const formattedValue = (+(
    Math.round((value + Number.EPSILON) * 100) / 100
  )).toLocaleString();
  // Add the appropriate currency notation
  switch (vs_currency) {
    case "usd":
      return "$" + formattedValue;
      break;
    default:
      return formattedValue;
  }
}
---

<Grid
  title={"Top " + category + " coins"}
  class="text-left team-grid items-center"
>
  {
    coins.map((coin: any) => (
      <div class="mt-2 hover:bg-gray-100 p-4 rounded-lg">
        <h3>
          {coin.name} ({coin.symbol})
        </h3>
        <h4>
          {showCurrency(coin.current_price)} ({vs_currency})
        </h4>
        <div>
          market cap: <b>{showCurrency(coin.market_cap)}</b> (rank #
          {coin.market_cap_rank})
        </div>
        <div>
          24h high/low:{" "}
          <b>
            {showCurrency(coin.high_24h)} / {showCurrency(coin.low_24h)}
          </b>
        </div>
        <div>
          24h % change: <b>{coin.price_change_percentage_24h * 100}%</b>
        </div>
        <div>
          7d sparkline: <div id={coin.id + "_sparkline"} class="h-3 text-2xl" />
        </div>
      </div>
    ))
  }
</Grid>
<astro-coins data-message={JSON.stringify(coins)}> </astro-coins>

<script>
  import * as d3 from "d3";

  // Using recommended way to pass data from frontmatter to client script via custom element.
  // See https://docs.astro.build/en/guides/client-side-scripts/#pass-frontmatter-variables-to-scripts
  class AstroCoins extends HTMLElement {
    connectedCallback() {
      // Read the message from the data attribute.
      const coins = JSON.parse(this.dataset.message || "[]");
      console.log("coins", coins);
      coins.forEach((coin: any) => {
        sparklinesLine(coin.id + "_sparkline", coin?.sparkline_in_7d?.price);
      });
    }
  }
  customElements.define("astro-coins", AstroCoins);

  /*
   * Create a sparkline chart with input data and display in target element
   * @param chartElementId - The id of the element to append the chart
   * @param data - an array of numbers representing the data for the sparkline
   */
  async function sparklinesLine(chartElementId: string, data: number[]) {
    const width = 150;
    const height = 20;
    const margin = { top: 5, right: 2, bottom: 0, left: 2 };
    const boundedwidth = width - margin.left - margin.right;
    const boundedheight = height - margin.top - margin.bottom;

    // // Generate random data for a line chart.
    // const data = d3.range(50).map((d) => Math.random());

    const xScale = d3
      .scaleLinear()
      .domain([0, data.length])
      .range([0, boundedwidth]);
    const yScale = d3
      .scaleLinear()
      .domain([d3.min(data) || 0, d3.max(data) || 1])
      .range([boundedheight, 0]);

    const svg = d3
      .select("#" + chartElementId)
      .append("svg")
      .attr("width", width)
      .attr("height", height)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    const line = d3
      .line()
      .x((d, i) => xScale(i))
      .y((d) => yScale(d));

    svg
      .append("path")
      .datum(data)
      .attr("fill", "none")
      .attr("stroke", "#bbb")
      .attr("stroke-width", 1)
      .attr("d", line);

    svg
      .append("circle")
      .attr("r", 2)
      .attr("cx", xScale(0))
      .attr("cy", yScale(data[0]))
      .attr("fill", "steelblue");

    svg
      .append("circle")
      .attr("r", 2)
      .attr("cx", xScale(data.length - 1))
      .attr("cy", yScale(data[data.length - 1]))
      .attr("fill", "tomato");
  }
</script>
